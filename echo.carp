(Project.config "title" "echo")

(use StaticArray)
(use String)
(use Array)
(use IO)

(system-include "stdio.h")
(register putchar (Fn [Int] Int) "putchar")

(system-include "unistd.h")
(register getopt (Fn [Int (Ptr (Ptr CChar)) (Ptr CChar)] Int) "getopt")
(register optarg (Ptr CChar) "optarg")
(register optind Int "optind")
(register opterr Int "opterr")
(register optopt Int "optopt")

;; TODO: Make this a safe function
(defn get-arg [n]
      (Maybe.unsafe-from (nth &System.args n)))

(defn parse-number [string-ref string-ref-length begin-index max-length digit? fold]
      (let [digits []]
	(do
	  ;; Collect digits
	  (while true
		 (let [digits-length (length &digits)
		       string-ref-index (+ digits-length begin-index)]
		   (if (or
			 (>= digits-length max-length)
			 (>= string-ref-index string-ref-length))
		     (break)
		     (let [item (char-at string-ref string-ref-index)]
		       (if (digit? item)
			 (push-back! &digits item)
			 (break))))))

	  (if (empty? &digits)
	    (Maybe.Nothing)
	    (Maybe.Just (let [amount-of-items-processed (length &digits)
			      number (fold digits)]
			  (Pair.init number amount-of-items-processed)))))))

(defn in-range? [v minimum maximum]
      (and (>= v minimum) (<= v maximum)))

(defn hex-digit? [c]
      (or (in-range? c \0 \9)
	  (or (in-range? c \A \F)
	      (in-range? c \a \f))))

(defn char-to-hex-nibble [c]
      (cond
	(in-range? c \0 \9) (- (Char.to-int c) (Char.to-int \0))
        (in-range? c \A \F) (+ 10 (- (Char.to-int c) (Char.to-int \A)))
        (in-range? c \a \f) (+ 10 (- (Char.to-int c) (Char.to-int \a)))
       0)) ;; TODO Use Maybe?

(defn fold-to-hex [arr]
      (let [result 0
	    nibbles (endo-map &(fn [x] (Char.from-int (char-to-hex-nibble x))) arr)]
	(do
	  (foreach [n &nibbles]
		   (set! result (Int.bit-or (Int.bit-shift-left result 4) (Char.to-int (Char.copy n)))))
	  (Char.from-int result))))

(defn oct-digit? [c]
      (in-range? c \0 \7))

(defn fold-to-oct [arr]
      (let [result 0
	    nibbles (endo-map &(fn [x] (Char.from-int (- (Char.to-int x) (Char.to-int \0)))) arr)]
	(do
	  (foreach [n &nibbles]
		   (set! result (Int.bit-or (Int.bit-shift-left result 3) (Char.to-int (Char.copy n)))))
	  (Char.from-int result))))

(defn print-bytes [bytes]
      (foreach [byte bytes]
	       (let [x (putchar (Int.copy byte))] ()))) ;; TODO: Do without let

(defn escape-string [string-ref]
      (let [escaped-string (the (Array Int) (Array.allocate (length string-ref)))
	    escaped-string-length 0
	    string-ref-index 0
	    string-ref-length (length string-ref)]
	(do
	  (while (< string-ref-index string-ref-length)
		 (let [current-char (char-at string-ref string-ref-index)
		       next-char-index (inc string-ref-index)
		       escaped-string-addition (Char.to-int current-char)
		       string-ref-index-addition 1]
		   (do
		     (when (and (= current-char \\) (< next-char-index string-ref-length))
		       ;; Escape sequence
		       (let [next-char (char-at string-ref next-char-index)]
			 (cond

			   ;; Produce no further output
			   (= \c next-char) (do
					      (print-bytes &(slice &escaped-string 0 escaped-string-length))
					      (System.exit 0))

			   (= \x next-char) (let [parse-result (parse-number
						      string-ref
						      string-ref-length
						      (inc next-char-index)
						      2
						      hex-digit?
						      fold-to-hex)]
					      (when (Maybe.just? &parse-result)
						(let [number-and-addition (Maybe.unsafe-from parse-result)]
						  (do
						    (set! escaped-string-addition (Char.to-int (Char.copy (Pair.a &number-and-addition))))
						    (set! string-ref-index-addition (+ 2 (Int.copy (Pair.b &number-and-addition))))))))

			   (= \0 next-char) (let [parse-result (parse-number
						      string-ref
						      string-ref-length
						      (inc next-char-index)
						      3
						      oct-digit?
						      fold-to-oct)]
					      (when (Maybe.just? &parse-result)
						(let [number-and-addition (Maybe.unsafe-from parse-result)]
						  (do
						    (set! escaped-string-addition (Char.to-int (Char.copy (Pair.a &number-and-addition))))
						    (set! string-ref-index-addition (+ 2 (Int.copy (Pair.b &number-and-addition))))))))

			   ;; Single character
			   (let [replacement-char (cond
						    (= \a next-char) (Maybe.Just 7)
						    (= \b next-char) (Maybe.Just 8)
						    (= \t next-char) (Maybe.Just 9)
						    (= \n next-char) (Maybe.Just 10)
						    (= \v next-char) (Maybe.Just 11)
						    (= \f next-char) (Maybe.Just 12)
						    (= \r next-char) (Maybe.Just 13)
						    (Maybe.Nothing))]
			     ;; TODO: Don't use Maybe
			     (when (Maybe.just? &replacement-char)
			       (do
				 (set! escaped-string-addition (Maybe.unsafe-from replacement-char))
				 (set! string-ref-index-addition 2)))))))

		     (aset! &escaped-string escaped-string-length escaped-string-addition)
		     (set! string-ref-index (+ string-ref-index string-ref-index-addition))
		     (set! escaped-string-length (inc escaped-string-length)))))

	  (slice &escaped-string 0 escaped-string-length))))

(defn echo-arguments [first-argument-index
		      last-argument-index
		      echo-newline
		      escape-arguments]
      (do
	(let [counter first-argument-index]
	  (while (< counter last-argument-index)
		 (do
		   (if escape-arguments
		     (print-bytes &(escape-string &(get-arg counter)))
		     (print &(get-arg counter)))
		   (set! counter (inc counter))
		   (when (>= counter last-argument-index)
		     (break))
		   (print " "))))
	(when echo-newline
	  (print "\n"))))

(defn main []
      (let [argc (length &System.args)
	    add-newline true
	    escape-characters false
	    c-args (the (Array (Ptr CChar)) [])]
	(do

	  ;; Parse flags
	  (StaticArray.foreach [arg &System.args] (push-back! &c-args (cstr arg)))
	  (push-back! &c-args NULL)
	  (let [opt 0
		argv (raw c-args)]
	    (while (do
		     (set! opt (getopt argc argv (cstr "enE")))
		     (not (= opt -1)))
		   (cond
		     (= opt (Char.to-int \e)) (set! escape-characters true)
		     (= opt (Char.to-int \E)) (set! escape-characters false)
		     (= opt (Char.to-int \n)) (set! add-newline false)
		     (break))))

	  (echo-arguments
	    optind
	    argc
	    add-newline
	    escape-characters))))
